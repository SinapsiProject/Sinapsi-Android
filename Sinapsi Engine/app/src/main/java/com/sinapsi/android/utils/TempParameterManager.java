package com.sinapsi.android.utils;

import android.content.Context;
import android.content.Intent;

import com.sinapsi.android.background.SinapsiActionBarActivity;

import java.util.HashMap;
import java.util.Map;

/**
 * Utility class to help sending temporary objects across activities/services in the same
 * application via intent and application instance.
 */
public class TempParameterManager {

    public static final String EXTRA_PARAM_KEY = "EXTRA_PARAM_KEY";

    private int paramIdCounter = 0;
    private Map<Integer, Object[]> paramMap = new HashMap<>();

    private static int callbackIdCounter = 0;
    private Map<Integer, SinapsiActionBarActivity.ActivityReturnCallback> callbackMap = new HashMap<>();

    /**
     * Puts the parameters to a map, which key is autogenerated and added to a new intent
     * instance as extra.
     *
     * @param context    the package context for the intent
     * @param target     the target class
     * @param parameters the parameters
     * @return a new Intent instance
     */
    public Intent newIntentForTempParameters(Context context, Class<?> target, Object... parameters) {
        Intent i = new Intent(context, target);
        paramMap.put(paramIdCounter, parameters);
        i.putExtra(EXTRA_PARAM_KEY, paramIdCounter);
        ++paramIdCounter;
        return i;
    }

    public Intent newIntentForTempParameters(Object... params){
        Intent i = new Intent();
        paramMap.put(paramIdCounter, params);
        i.putExtra(EXTRA_PARAM_KEY, paramIdCounter);
        ++paramIdCounter;
        return i;
    }

    /**
     * Gets the temp parameters for the given id
     *
     * @param id the id
     * @return an array of objects
     */
    public Object[] getTempParameters(Integer id) {
        return paramMap.get(id);
    }

    /**
     * Removes the parameters for the given id from the map
     *
     * @param id the id
     */
    public void removeTempParameters(Integer id) {
        paramMap.remove(id);
    }

    /**
     * Gets the temp parameters for the given id and removes them from the map
     *
     * @param id the id
     * @return the temp parameters
     */
    public Object[] pullTempParameters(Integer id) {
        Object[] result = getTempParameters(id);
        removeTempParameters(id);
        return result;
    }

    /**
     * Gets the temp parameters, using the id in the EXTRA_PARAM_KEY entry in the given intent's extras.
     *
     * @param i the intent
     * @return the temp parameters
     */
    public Object[] getTempParameters(Intent i) {
        int id = i.getIntExtra(EXTRA_PARAM_KEY, -1);
        if (id < 0) throw new RuntimeException("The intent has no EXTRA_PARAM_KEY entry.");
        return getTempParameters(id);
    }

    /**
     * Gets the temp parameters, using the id in the EXTRA_PARAM_KEY entry in the given intent's extras,
     * and removes them from the map
     *
     * @param i the intent
     * @return the temp parameters
     */
    public Object[] pullTempParameters(Intent i) {
        Object[] result = getTempParameters(i);
        removeTempParameters(i.getIntExtra(EXTRA_PARAM_KEY, -1));
        return result;
    }

    public int addReturnCallback(SinapsiActionBarActivity.ActivityReturnCallback callback){
        int result = callbackIdCounter++;
        callbackMap.put(result, callback);
        return result;
    }

    public SinapsiActionBarActivity.ActivityReturnCallback pullReturnCallback(int requestCode){
        return callbackMap.remove(requestCode);
    }
}
